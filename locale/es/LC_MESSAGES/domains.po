# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2016, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.6+\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-28 17:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Takayuki SHIMIZUKAWA <shimizukawa@gmail.com>, 2016\n"
"Language-Team: Spanish (https://www.transifex.com/sphinx-doc/teams/15434/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../sphinx/doc/domains.rst:6
msgid "Sphinx Domains"
msgstr ""

#: ../../sphinx/doc/domains.rst:11
msgid "What is a Domain?"
msgstr "Â¿Que es un dominio?"

#: ../../sphinx/doc/domains.rst:13
msgid ""
"Originally, Sphinx was conceived for a single project, the documentation of "
"the Python language.  Shortly afterwards, it was made available for everyone"
" as a documentation tool, but the documentation of Python modules remained "
"deeply built in -- the most fundamental directives, like ``function``, were "
"designed for Python objects.  Since Sphinx has become somewhat popular, "
"interest developed in using it for many different purposes: C/C++ projects, "
"JavaScript, or even reStructuredText markup (like in this documentation)."
msgstr ""

#: ../../sphinx/doc/domains.rst:21
msgid ""
"While this was always possible, it is now much easier to easily support "
"documentation of projects using different programming languages or even ones"
" not supported by the main Sphinx distribution, by providing a **domain** "
"for every such purpose."
msgstr ""

#: ../../sphinx/doc/domains.rst:26
msgid ""
"A domain is a collection of markup (reStructuredText :term:`directive`\\ s "
"and :term:`role`\\ s) to describe and link to :term:`object`\\ s belonging "
"together, e.g. elements of a programming language.  Directive and role names"
" in a domain have names like ``domain:name``, e.g. ``py:function``.  Domains"
" can also provide custom indices (like the Python Module Index)."
msgstr ""

#: ../../sphinx/doc/domains.rst:32
msgid ""
"Having domains means that there are no naming problems when one set of "
"documentation wants to refer to e.g. C++ and Python classes.  It also means "
"that extensions that support the documentation of whole new languages are "
"much easier to write."
msgstr ""

#: ../../sphinx/doc/domains.rst:37
msgid ""
"This section describes what the domains that come with Sphinx provide.  The "
"domain API is documented as well, in the section :ref:`domain-api`."
msgstr ""

#: ../../sphinx/doc/domains.rst:44
msgid "Basic Markup"
msgstr ""

#: ../../sphinx/doc/domains.rst:46
msgid ""
"Most domains provide a number of :dfn:`object description directives`, used "
"to describe specific objects provided by modules.  Each directive requires "
"one or more signatures to provide basic information about what is being "
"described, and the content should be the description.  The basic version "
"makes entries in the general index; if no index entry is desired, you can "
"give the directive option flag ``:noindex:``.  An example using a Python "
"domain directive::"
msgstr ""

#: ../../sphinx/doc/domains.rst:58
msgid ""
"This describes the two Python functions ``spam`` and ``ham``.  (Note that "
"when signatures become too long, you can break them if you add a backslash "
"to lines that are continued in the next line.  Example::"
msgstr ""

#: ../../sphinx/doc/domains.rst:66
msgid "(This example also shows how to use the ``:noindex:`` flag.)"
msgstr ""

#: ../../sphinx/doc/domains.rst:68
msgid ""
"The domains also provide roles that link back to these object descriptions."
"  For example, to link to one of the functions described in the example "
"above, you could say ::"
msgstr ""

#: ../../sphinx/doc/domains.rst:74
msgid ""
"As you can see, both directive and role names contain the domain name and "
"the directive name."
msgstr ""

#: ../../sphinx/doc/domains.rst:78
msgid "Default Domain"
msgstr ""

#: ../../sphinx/doc/domains.rst:79
msgid ""
"To avoid having to writing the domain name all the time when you e.g. only "
"describe Python objects, a default domain can be selected with either the "
"config value :confval:`primary_domain` or this directive:"
msgstr ""

#: ../../sphinx/doc/domains.rst:85
msgid ""
"Select a new default domain.  While the :confval:`primary_domain` selects a "
"global default, this only has an effect within the same file."
msgstr ""

#: ../../sphinx/doc/domains.rst:88
msgid ""
"If no other default is selected, the Python domain (named ``py``) is the "
"default one, mostly for compatibility with documentation written for older "
"versions of Sphinx."
msgstr ""

#: ../../sphinx/doc/domains.rst:92
msgid ""
"Directives and roles that belong to the default domain can be mentioned "
"without giving the domain name, i.e. ::"
msgstr ""

#: ../../sphinx/doc/domains.rst:103
msgid "Cross-referencing syntax"
msgstr ""

#: ../../sphinx/doc/domains.rst:105
msgid ""
"For cross-reference roles provided by domains, the same facilities exist as "
"for general cross-references.  See :ref:`xref-syntax`."
msgstr ""

#: ../../sphinx/doc/domains.rst:108
msgid "In short:"
msgstr ""

#: ../../sphinx/doc/domains.rst:110
msgid ""
"You may supply an explicit title and reference target: ``:role:`title "
"<target>``` will refer to *target*, but the link text will be *title*."
msgstr ""

#: ../../sphinx/doc/domains.rst:113
msgid ""
"If you prefix the content with ``!``, no reference/hyperlink will be "
"created."
msgstr ""

#: ../../sphinx/doc/domains.rst:115
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target.  For example, ``:py:meth:`~Queue.Queue.get``` will "
"refer to ``Queue.Queue.get`` but only display ``get`` as the link text."
msgstr ""

#: ../../sphinx/doc/domains.rst:121
msgid "The Python Domain"
msgstr ""

#: ../../sphinx/doc/domains.rst:123
msgid ""
"The Python domain (name **py**) provides the following directives for module"
" declarations:"
msgstr ""

#: ../../sphinx/doc/domains.rst:128
msgid ""
"This directive marks the beginning of the description of a module (or "
"package submodule, in which case the name should be fully qualified, "
"including the package name).  It does not create content (like e.g. "
":rst:dir:`py:class` does)."
msgstr ""

#: ../../sphinx/doc/domains.rst:133
msgid "This directive will also cause an entry in the global module index."
msgstr ""

#: ../../sphinx/doc/domains.rst:135
msgid ""
"The ``platform`` option, if present, is a comma-separated list of the "
"platforms on which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short identifiers; "
"examples that are in use include \"IRIX\", \"Mac\", \"Windows\", and "
"\"Unix\".  It is important to use a key which has already been used when "
"applicable."
msgstr ""

#: ../../sphinx/doc/domains.rst:141
msgid ""
"The ``synopsis`` option should consist of one sentence describing the "
"module's purpose -- it is currently only used in the Global Module Index."
msgstr ""

#: ../../sphinx/doc/domains.rst:144
msgid ""
"The ``deprecated`` option can be given (with no value) to mark a module as "
"deprecated; it will be designated as such in various locations then."
msgstr ""

#: ../../sphinx/doc/domains.rst:150
msgid ""
"This directive tells Sphinx that the classes, functions etc. documented from"
" here are in the given module (like :rst:dir:`py:module`), but it will not "
"create index entries, an entry in the Global Module Index, or a link target "
"for :rst:role:`py:mod`.  This is helpful in situations where documentation "
"for things in a module is spread over multiple files or sections -- one "
"location has the :rst:dir:`py:module` directive, the others only "
":rst:dir:`py:currentmodule`."
msgstr ""

#: ../../sphinx/doc/domains.rst:159
msgid "The following directives are provided for module and class contents:"
msgstr ""

#: ../../sphinx/doc/domains.rst:163
msgid ""
"Describes a module-level function.  The signature should include the "
"parameters as given in the Python function definition, see "
":ref:`signatures`. For example::"
msgstr ""

#: ../../sphinx/doc/domains.rst:169
msgid "For methods you should use :rst:dir:`py:method`."
msgstr ""

#: ../../sphinx/doc/domains.rst:171
msgid ""
"The description normally includes information about the parameters required "
"and how they are used (especially whether mutable objects passed as "
"parameters are modified), side effects, and possible exceptions."
msgstr ""

#: ../../sphinx/doc/domains.rst:175
msgid ""
"This information can (in any ``py`` directive) optionally be given in a "
"structured form, see :ref:`info-field-lists`."
msgstr ""

#: ../../sphinx/doc/domains.rst:180
msgid ""
"Describes global data in a module, including both variables and values used "
"as \"defined constants.\"  Class and object attributes are not documented "
"using this environment."
msgstr ""

#: ../../sphinx/doc/domains.rst:186
msgid ""
"Describes an exception class.  The signature can, but need not include "
"parentheses with constructor arguments."
msgstr ""

#: ../../sphinx/doc/domains.rst:192
msgid ""
"Describes a class.  The signature can optionally include parentheses with "
"parameters which will be shown as the constructor arguments.  See also "
":ref:`signatures`."
msgstr ""

#: ../../sphinx/doc/domains.rst:196
msgid ""
"Methods and attributes belonging to the class should be placed in this "
"directive's body.  If they are placed outside, the supplied name should "
"contain the class name so that cross-references still work.  Example::"
msgstr ""

#: ../../sphinx/doc/domains.rst:210
msgid "The first way is the preferred one."
msgstr ""

#: ../../sphinx/doc/domains.rst:214
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may be "
"changed directly."
msgstr ""

#: ../../sphinx/doc/domains.rst:220
msgid ""
"Describes an object method.  The parameters should not include the ``self`` "
"parameter.  The description should include similar information to that "
"described for ``function``.  See also :ref:`signatures` and :ref:`info-"
"field-lists`."
msgstr ""

#: ../../sphinx/doc/domains.rst:227
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a static method."
msgstr ""

#: ../../sphinx/doc/domains.rst:233
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a class method."
msgstr ""

#: ../../sphinx/doc/domains.rst:240
msgid ""
"Describes a decorator function.  The signature should represent the usage as"
" a decorator.  For example, given the functions"
msgstr ""

#: ../../sphinx/doc/domains.rst:255
msgid "the descriptions should look like this::"
msgstr ""

#: ../../sphinx/doc/domains.rst:265
msgid "(as opposed to ``.. py:decorator:: removename(func)``.)"
msgstr ""

#: ../../sphinx/doc/domains.rst:267
msgid ""
"There is no ``py:deco`` role to link to a decorator that is marked up with "
"this directive; rather, use the :rst:role:`py:func` role."
msgstr ""

#: ../../sphinx/doc/domains.rst:273
msgid "Same as :rst:dir:`py:decorator`, but for decorators that are methods."
msgstr ""

#: ../../sphinx/doc/domains.rst:275
msgid "Refer to a decorator method using the :rst:role:`py:meth` role."
msgstr ""

#: ../../sphinx/doc/domains.rst:281
msgid "Python Signatures"
msgstr ""

#: ../../sphinx/doc/domains.rst:283
msgid ""
"Signatures of functions, methods and class constructors can be given like "
"they would be written in Python."
msgstr ""

#: ../../sphinx/doc/domains.rst:286
msgid ""
"Default values for optional arguments can be given (but if they contain "
"commas, they will confuse the signature parser).  Python 3-style argument "
"annotations can also be given as well as return type annotations::"
msgstr ""

#: ../../sphinx/doc/domains.rst:292
msgid ""
"For functions with optional parameters that don't have default values "
"(typically functions implemented in C extension modules without keyword "
"argument support), you can use brackets to specify the optional parts:"
msgstr ""

#: ../../sphinx/doc/domains.rst:298
msgid "It is customary to put the opening bracket before the comma."
msgstr ""

#: ../../sphinx/doc/domains.rst:304 ../../sphinx/doc/domains.rst:872
msgid "Info field lists"
msgstr ""

#: ../../sphinx/doc/domains.rst:308
msgid ""
"Inside Python object description directives, reST field lists with these "
"fields are recognized and formatted nicely:"
msgstr ""

#: ../../sphinx/doc/domains.rst:311
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: "
"Description of a parameter."
msgstr ""

#: ../../sphinx/doc/domains.rst:313
msgid "``type``: Type of a parameter.  Creates a link if possible."
msgstr ""

#: ../../sphinx/doc/domains.rst:314
msgid ""
"``raises``, ``raise``, ``except``, ``exception``: That (and when) a specific"
" exception is raised."
msgstr ""

#: ../../sphinx/doc/domains.rst:316
msgid "``var``, ``ivar``, ``cvar``: Description of a variable."
msgstr ""

#: ../../sphinx/doc/domains.rst:317
msgid "``vartype``: Type of a variable.  Creates a link if possible."
msgstr ""

#: ../../sphinx/doc/domains.rst:318
msgid "``returns``, ``return``: Description of the return value."
msgstr ""

#: ../../sphinx/doc/domains.rst:319
msgid "``rtype``: Return type.  Creates a link if possible."
msgstr ""

#: ../../sphinx/doc/domains.rst:321
msgid ""
"The field names must consist of one of these keywords and an argument "
"(except for ``returns`` and ``rtype``, which do not need an argument).  This"
" is best explained by an example::"
msgstr ""

#: ../../sphinx/doc/domains.rst:339
msgid "This will render like this:"
msgstr ""

#: ../../sphinx/doc/domains.rst:344
msgid "Send a message to a recipient"
msgstr ""

#: ../../sphinx/doc/domains.rst:346
msgid "The person sending the message"
msgstr ""

#: ../../sphinx/doc/domains.rst:347
msgid "The recipient of the message"
msgstr ""

#: ../../sphinx/doc/domains.rst:348
msgid "The body of the message"
msgstr ""

#: ../../sphinx/doc/domains.rst:349
msgid "The priority of the message, can be a number 1-5"
msgstr ""

#: ../../sphinx/doc/domains.rst:351
msgid "the message id"
msgstr ""

#: ../../sphinx/doc/domains.rst:353
msgid "if the message_body exceeds 160 characters"
msgstr ""

#: ../../sphinx/doc/domains.rst:354
msgid "if the message_body is not a basestring"
msgstr ""

#: ../../sphinx/doc/domains.rst:356
msgid ""
"It is also possible to combine parameter type and description, if the type "
"is a single word, like this::"
msgstr ""

#: ../../sphinx/doc/domains.rst:364
msgid ""
"Container types such as lists and dictionaries can be linked automatically "
"using the following syntax::"
msgstr ""

#: ../../sphinx/doc/domains.rst:374
msgid ""
"Multiple types in a type field will be linked automatically if separated by "
"the word \"or\"::"
msgstr ""

#: ../../sphinx/doc/domains.rst:384
msgid "Cross-referencing Python objects"
msgstr ""

#: ../../sphinx/doc/domains.rst:386
msgid ""
"The following roles refer to objects in modules and are possibly hyperlinked"
" if a matching identifier is found:"
msgstr ""

#: ../../sphinx/doc/domains.rst:391
msgid ""
"Reference a module; a dotted name may be used.  This should also be used for"
" package names."
msgstr ""

#: ../../sphinx/doc/domains.rst:396
msgid ""
"Reference a Python function; dotted names may be used.  The role text needs "
"not include trailing parentheses to enhance readability; they will be added "
"automatically by Sphinx if the :confval:`add_function_parentheses` config "
"value is ``True`` (the default)."
msgstr ""

#: ../../sphinx/doc/domains.rst:403
msgid "Reference a module-level variable."
msgstr ""

#: ../../sphinx/doc/domains.rst:407
msgid ""
"Reference a \"defined\" constant.  This may be a Python variable that is not"
" intended to be changed."
msgstr ""

#: ../../sphinx/doc/domains.rst:412
msgid "Reference a class; a dotted name may be used."
msgstr ""

#: ../../sphinx/doc/domains.rst:416
msgid ""
"Reference a method of an object.  The role text can include the type name "
"and the method name; if it occurs within the description of a type, the type"
" name can be omitted.  A dotted name may be used."
msgstr ""

#: ../../sphinx/doc/domains.rst:422
msgid "Reference a data attribute of an object."
msgstr ""

#: ../../sphinx/doc/domains.rst:426
msgid "Reference an exception.  A dotted name may be used."
msgstr ""

#: ../../sphinx/doc/domains.rst:430
msgid ""
"Reference an object of unspecified type.  Useful e.g. as the "
":confval:`default_role`."
msgstr ""

#: ../../sphinx/doc/domains.rst:435
msgid ""
"The name enclosed in this markup can include a module name and/or a class "
"name. For example, ``:py:func:`filter``` could refer to a function named "
"``filter`` in the current module, or the built-in function of that name.  In"
" contrast, ``:py:func:`foo.filter``` clearly refers to the ``filter`` "
"function in the ``foo`` module."
msgstr ""

#: ../../sphinx/doc/domains.rst:441
msgid ""
"Normally, names in these roles are searched first without any further "
"qualification, then with the current module name prepended, then with the "
"current module and class name (if any) prepended.  If you prefix the name "
"with a dot, this order is reversed.  For example, in the documentation of "
"Python's :mod:`codecs` module, ``:py:func:`open``` always refers to the "
"built-in function, while ``:py:func:`.open``` refers to :func:`codecs.open`."
msgstr ""

#: ../../sphinx/doc/domains.rst:448
msgid ""
"A similar heuristic is used to determine whether the name is an attribute of"
" the currently documented class."
msgstr ""

#: ../../sphinx/doc/domains.rst:451
msgid ""
"Also, if the name is prefixed with a dot, and no exact match is found, the "
"target is taken as a suffix and all object names with that suffix are "
"searched.  For example, ``:py:meth:`.TarFile.close``` references the "
"``tarfile.TarFile.close()`` function, even if the current module is not "
"``tarfile``.  Since this can get ambiguous, if there is more than one "
"possible match, you will get a warning from Sphinx."
msgstr ""

#: ../../sphinx/doc/domains.rst:458
msgid ""
"Note that you can combine the ``~`` and ``.`` prefixes: "
"``:py:meth:`~.TarFile.close``` will reference the "
"``tarfile.TarFile.close()`` method, but the visible link caption will only "
"be ``close()``."
msgstr ""

#: ../../sphinx/doc/domains.rst:466
msgid "The C Domain"
msgstr ""

#: ../../sphinx/doc/domains.rst:468
msgid "The C domain (name **c**) is suited for documentation of C API."
msgstr ""

#: ../../sphinx/doc/domains.rst:472
msgid "Describes a C function. The signature should be given as in C, e.g.::"
msgstr ""

#: ../../sphinx/doc/domains.rst:476
msgid ""
"This is also used to describe function-like preprocessor macros.  The names "
"of the arguments should be given so they may be used in the description."
msgstr ""

#: ../../sphinx/doc/domains.rst:479
msgid ""
"Note that you don't have to backslash-escape asterisks in the signature, as "
"it is not parsed by the reST inliner."
msgstr ""

#: ../../sphinx/doc/domains.rst:484
msgid "Describes a C struct member. Example signature::"
msgstr ""

#: ../../sphinx/doc/domains.rst:488
msgid ""
"The text of the description should include the range of values allowed, how "
"the value should be interpreted, and whether the value can be changed. "
"References to structure members in text should use the ``member`` role."
msgstr ""

#: ../../sphinx/doc/domains.rst:494
msgid ""
"Describes a \"simple\" C macro.  Simple macros are macros which are used for"
" code expansion, but which do not take arguments so cannot be described as "
"functions.  This is a simple C-language ``#define``.  Examples of its use in"
" the Python documentation include :c:macro:`PyObject_HEAD` and "
":c:macro:`Py_BEGIN_ALLOW_THREADS`."
msgstr ""

#: ../../sphinx/doc/domains.rst:502
msgid ""
"Describes a C type (whether defined by a typedef or struct). The signature "
"should just be the type name."
msgstr ""

#: ../../sphinx/doc/domains.rst:507
msgid ""
"Describes a global C variable.  The signature should include the type, such "
"as::"
msgstr ""

#: ../../sphinx/doc/domains.rst:516
msgid "Cross-referencing C constructs"
msgstr ""

#: ../../sphinx/doc/domains.rst:518
msgid ""
"The following roles create cross-references to C-language constructs if they"
" are defined in the documentation:"
msgstr ""

#: ../../sphinx/doc/domains.rst:523
msgid "Reference a C-language variable."
msgstr ""

#: ../../sphinx/doc/domains.rst:527
msgid "Reference a C-language function. Should include trailing parentheses."
msgstr ""

#: ../../sphinx/doc/domains.rst:531
msgid "Reference a \"simple\" C macro, as defined above."
msgstr ""

#: ../../sphinx/doc/domains.rst:535
msgid "Reference a C-language type."
msgstr ""

#: ../../sphinx/doc/domains.rst:539
msgid "The C++ Domain"
msgstr ""

#: ../../sphinx/doc/domains.rst:541
msgid "The C++ domain (name **cpp**) supports documenting C++ projects."
msgstr ""

#: ../../sphinx/doc/domains.rst:543
msgid ""
"The following directives are available. All declarations can start with a "
"visibility statement (``public``, ``private`` or ``protected``)."
msgstr ""

#: ../../sphinx/doc/domains.rst:548
msgid ""
"Describe a class/struct, possibly with specification of inheritance, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:552
msgid "The class can be directly declared inside a nested scope, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:556
msgid "A template class can be declared::"
msgstr ""

#: ../../sphinx/doc/domains.rst:560
msgid "or with a line break::"
msgstr ""

#: ../../sphinx/doc/domains.rst:565
msgid "Full and partial template specialisations can be declared::"
msgstr ""

#: ../../sphinx/doc/domains.rst:576
msgid "Describe a function or member function, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:602
msgid "Function templates can also be described::"
msgstr ""

#: ../../sphinx/doc/domains.rst:607
msgid "and function template specialisations::"
msgstr ""

#: ../../sphinx/doc/domains.rst:616
msgid "Describe a variable or member variable, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:624
msgid "Variable templates can also be described::"
msgstr ""

#: ../../sphinx/doc/domains.rst:634
msgid ""
"Describe a type as in a typedef declaration, a type alias declaration, or "
"simply the name of a type with unspecified type, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:649
msgid "A type alias can also be templated::"
msgstr ""

#: ../../sphinx/doc/domains.rst:654
msgid "The example are rendered as follows."
msgstr ""

#: ../../sphinx/doc/domains.rst:658
msgid "A typedef-like declaration of a type."
msgstr ""

#: ../../sphinx/doc/domains.rst:662
msgid "Declaration of a type alias with unspecified type."
msgstr ""

#: ../../sphinx/doc/domains.rst:666
msgid "Declaration of a type alias."
msgstr ""

#: ../../sphinx/doc/domains.rst:676
msgid ""
"Describe a (scoped) enum, possibly with the underlying type specified. Any "
"enumerators declared inside an unscoped enum will be declared both in the "
"enum scope and in the parent scope. Examples::"
msgstr ""

#: ../../sphinx/doc/domains.rst:700
msgid "Describe an enumerator, optionally with its value defined, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:710
msgid ""
"The support for concepts is experimental. It is based on the Concepts "
"Technical Specification, and the features may change as the TS evolves."
msgstr ""

#: ../../sphinx/doc/domains.rst:713
msgid ""
"Describe a variable concept or a function concept. Both must have exactly 1 "
"template parameter list. The name may be a nested name. Examples::"
msgstr ""

#: ../../sphinx/doc/domains.rst:726
msgid "They will render as follows:"
msgstr ""

#: ../../sphinx/doc/domains.rst:730
msgid ""
"Proxy to an element of a notional sequence that can be compared, indirected,"
" or incremented."
msgstr ""

#: ../../sphinx/doc/domains.rst:735
msgid ""
"Holder of elements, to which it can provide access via "
":cpp:concept:`Iterator` s."
msgstr ""

#: ../../sphinx/doc/domains.rst:739
msgid "Constrained Templates"
msgstr ""

#: ../../sphinx/doc/domains.rst:741
msgid ""
"The support for constrained templates is experimental. It is based on the "
"Concepts Technical Specification, and the features may change as the TS "
"evolves."
msgstr ""

#: ../../sphinx/doc/domains.rst:744
msgid "Sphinx does not currently support ``requires`` clauses."
msgstr ""

#: ../../sphinx/doc/domains.rst:747
msgid "Placeholders"
msgstr ""

#: ../../sphinx/doc/domains.rst:749
msgid ""
"Declarations may use the name of a concept to introduce constrained template"
" parameters, or the keyword ``auto`` to introduce unconstrained template "
"parameters::"
msgstr ""

#: ../../sphinx/doc/domains.rst:762
msgid "Template Introductions"
msgstr ""

#: ../../sphinx/doc/domains.rst:764
msgid ""
"Simple constrained function or class templates can be declared with a "
"`template introduction` instead of a template parameter list::"
msgstr ""

#: ../../sphinx/doc/domains.rst:775
msgid "They are rendered as follows."
msgstr ""

#: ../../sphinx/doc/domains.rst:779
msgid ""
"A function template with a template parameter constrained to be an Iterator."
msgstr ""

#: ../../sphinx/doc/domains.rst:783
msgid ""
"A class template with a template parameter constrained to be "
"LessThanComparable."
msgstr ""

#: ../../sphinx/doc/domains.rst:785
msgid ""
"Note however that no checking is performed with respect to parameter "
"compatibility. E.g., ``Iterator{A, B, C}`` will be accepted as an "
"introduction even though it would not be valid C++."
msgstr ""

#: ../../sphinx/doc/domains.rst:791
msgid "Namespacing"
msgstr ""

#: ../../sphinx/doc/domains.rst:793
msgid ""
"Declarations in the C++ domain are as default placed in global scope. The "
"current scope can be changed using three namespace directives. They manage a"
" stack declarations where ``cpp:namespace`` resets the stack and changes a "
"given scope. The ``cpp:namespace-push`` directive changes the scope to a "
"given inner scope of the current one. The ``cpp:namespace-pop`` directive "
"undos the most recent ``cpp:namespace-push`` directive."
msgstr ""

#: ../../sphinx/doc/domains.rst:804
msgid ""
"Changes the current scope for the subsequent objects to the given scope, and"
" resets the namespace directive stack. Note that the namespace does not need"
" to correspond to C++ namespaces, but can end in names of classes, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:811
msgid ""
"All subsequent objects will be defined as if their name were declared with "
"the scope prepended. The subsequent cross-references will be searched for "
"starting in the current scope."
msgstr ""

#: ../../sphinx/doc/domains.rst:814
msgid ""
"Using ``NULL``, ``0``, or ``nullptr`` as the scope will change to global "
"scope."
msgstr ""

#: ../../sphinx/doc/domains.rst:816
msgid "A namespace declaration can also be templated, e.g.,::"
msgstr ""

#: ../../sphinx/doc/domains.rst:825
msgid ""
"declares ``size`` as a member function of the template class "
"``std::vector``. Equivalently this could have been declared using::"
msgstr ""

#: ../../sphinx/doc/domains.rst:833
msgid "or:::"
msgstr ""

#: ../../sphinx/doc/domains.rst:841
msgid "Change the scope relatively to the current scope. For example, after::"
msgstr ""

#: ../../sphinx/doc/domains.rst:847
msgid "the current scope will be ``A::B::C::D``."
msgstr ""

#: ../../sphinx/doc/domains.rst:851
msgid ""
"Undo the previous ``cpp:namespace-push`` directive (*not* just pop a scope)."
" For example, after::"
msgstr ""

#: ../../sphinx/doc/domains.rst:860
msgid "the current scope will be ``A::B`` (*not* ``A::B::C``)."
msgstr ""

#: ../../sphinx/doc/domains.rst:862
msgid ""
"If no previous ``cpp:namespace-push`` directive has been used, but only a "
"``cpp:namespace`` directive, then the current scope will be reset to global "
"scope. That is, ``.. cpp:namespace:: A::B`` is equivalent to::"
msgstr ""

#: ../../sphinx/doc/domains.rst:874
msgid ""
"The C++ directives support the following info fields (see also :ref:`info-"
"field-lists`):"
msgstr ""

#: ../../sphinx/doc/domains.rst:876
msgid "`param`, `parameter`, `arg`, `argument`: Description of a parameter."
msgstr ""

#: ../../sphinx/doc/domains.rst:877
msgid "`tparam`: Description of a template parameter."
msgstr ""

#: ../../sphinx/doc/domains.rst:878
msgid "`returns`, `return`: Description of a return value."
msgstr ""

#: ../../sphinx/doc/domains.rst:879
msgid ""
"`throws`, `throw`, `exception`: Description of a possibly thrown exception."
msgstr ""

#: ../../sphinx/doc/domains.rst:885
msgid "Cross-referencing"
msgstr ""

#: ../../sphinx/doc/domains.rst:887
msgid "These roles link to the given declaration types:"
msgstr ""

#: ../../sphinx/doc/domains.rst:899
msgid ""
"Reference a C++ declaration by name (see below for details). The name must "
"be properly qualified relative to the position of the link."
msgstr ""

#: ../../sphinx/doc/domains.rst:902
msgid "Note on References with Templates Parameters/Arguments"
msgstr ""

#: ../../sphinx/doc/domains.rst:904
msgid ""
"Sphinx's syntax to give references a custom title can interfere with linking"
" to template classes, if nothing follows the closing angle bracket, i.e. if "
"the link looks like this: ``:cpp:class:`MyClass<int>```. This is interpreted"
" as a link to ``int`` with a title of ``MyClass``. In this case, please "
"escape the opening angle bracket with a backslash, like this: "
"``:cpp:class:`MyClass\\<int>```."
msgstr ""

#: ../../sphinx/doc/domains.rst:911
msgid "Note on References to Overloaded Functions"
msgstr ""

#: ../../sphinx/doc/domains.rst:913
msgid ""
"It is currently impossible to link to a specific version of an overloaded "
"method.  Currently the C++ domain is the first domain that has basic support"
" for overloaded methods and until there is more data for comparison we don't"
" want to select a bad syntax to reference a specific overload.  Currently "
"Sphinx will link to the first overloaded version of the method / function."
msgstr ""

#: ../../sphinx/doc/domains.rst:921
msgid "Declarations without template parameters and template arguments"
msgstr ""

#: ../../sphinx/doc/domains.rst:923
msgid ""
"For linking to non-templated declarations the name must be a nested name, "
"e.g., ``f`` or ``MyClass::f``."
msgstr ""

#: ../../sphinx/doc/domains.rst:927
msgid "Templated declarations"
msgstr ""

#: ../../sphinx/doc/domains.rst:929 ../../sphinx/doc/domains.rst:957
msgid "Assume the following declarations."
msgstr ""

#: ../../sphinx/doc/domains.rst:939
msgid ""
"In general the reference must include the template paraemter declarations, "
"e.g., ``template\\<typename TOuter> Wrapper::Outer`` "
"(:cpp:class:`template\\<typename TOuter> Wrapper::Outer`). Currently the "
"lookup only succeed if the template parameter identifiers are equal strings."
" That is, ``template\\<typename UOuter> Wrapper::Outer`` will not work."
msgstr ""

#: ../../sphinx/doc/domains.rst:944
msgid ""
"The inner template class can not be directly referenced, unless the current "
"namespace is changed or the following shorthand is used. If a template "
"parameter list is omitted, then the lookup will assume either a template or "
"a non-template, but not a partial template specialisation. This means the "
"following references work."
msgstr ""

#: ../../sphinx/doc/domains.rst:950
msgid "``Wrapper::Outer`` (:cpp:class:`Wrapper::Outer`)"
msgstr ""

#: ../../sphinx/doc/domains.rst:951
msgid "``Wrapper::Outer::Inner`` (:cpp:class:`Wrapper::Outer::Inner`)"
msgstr ""

#: ../../sphinx/doc/domains.rst:952
msgid ""
"``template\\<typename TInner> Wrapper::Outer::Inner`` "
"(:cpp:class:`template\\<typename TInner> Wrapper::Outer::Inner`)"
msgstr ""

#: ../../sphinx/doc/domains.rst:955
msgid "(Full) Template Specialisations"
msgstr ""

#: ../../sphinx/doc/domains.rst:974
msgid ""
"In general the reference must include a template parameter list for each "
"template argument list. The full specialisation above can therefore be "
"referenced with ``template\\<> Outer\\<int>`` (:cpp:class:`template\\<> "
"Outer\\<int>`) and ``template\\<> template\\<> Outer\\<int>::Inner\\<bool>``"
" (:cpp:class:`template\\<> template\\<> Outer\\<int>::Inner\\<bool>`). As a "
"shorthand the empty template parameter list can be omitted, e.g., "
"``Outer\\<int>`` (:cpp:class:`Outer\\<int>`) and "
"``Outer\\<int>::Inner\\<bool>`` (:cpp:class:`Outer\\<int>::Inner\\<bool>`)."
msgstr ""

#: ../../sphinx/doc/domains.rst:982
msgid "Partial Template Specialisations"
msgstr ""

#: ../../sphinx/doc/domains.rst:984
msgid "Assume the following declaration."
msgstr ""

#: ../../sphinx/doc/domains.rst:989
msgid ""
"References to partial specialisations must always include the template "
"parameter lists, e.g., ``template\\<typename T> Outer\\<T*>`` "
"(:cpp:class:`template\\<typename T> Outer\\<T*>`). Currently the lookup only"
" succeed if the template parameter identifiers are equal strings."
msgstr ""

#: ../../sphinx/doc/domains.rst:995
msgid "Configuration Variables"
msgstr ""

#: ../../sphinx/doc/domains.rst:997
msgid "See :ref:`cpp-config`."
msgstr ""

#: ../../sphinx/doc/domains.rst:1001
msgid "The Standard Domain"
msgstr ""

#: ../../sphinx/doc/domains.rst:1003
msgid ""
"The so-called \"standard\" domain collects all markup that doesn't warrant a"
" domain of its own.  Its directives and roles are not prefixed with a domain"
" name."
msgstr ""

#: ../../sphinx/doc/domains.rst:1007
msgid ""
"The standard domain is also where custom object descriptions, added using "
"the :func:`~sphinx.application.Sphinx.add_object_type` API, are placed."
msgstr ""

#: ../../sphinx/doc/domains.rst:1010
msgid ""
"There is a set of directives allowing documenting command-line programs:"
msgstr ""

#: ../../sphinx/doc/domains.rst:1014
msgid ""
"Describes a command line argument or switch.  Option argument names should "
"be enclosed in angle brackets.  Examples::"
msgstr ""

#: ../../sphinx/doc/domains.rst:1025
msgid ""
"The directive will create cross-reference targets for the given options, "
"referencable by :rst:role:`option` (in the example case, you'd use something"
" like ``:option:`dest_dir```, ``:option:`-m```, or ``:option:`--module```)."
msgstr ""

#: ../../sphinx/doc/domains.rst:1029
msgid ""
"``cmdoption`` directive is a deprecated alias for the ``option`` directive."
msgstr ""

#: ../../sphinx/doc/domains.rst:1033
msgid ""
"Describes an environment variable that the documented code or program uses "
"or defines.  Referencable by :rst:role:`envvar`."
msgstr ""

#: ../../sphinx/doc/domains.rst:1038
msgid ""
"Like :rst:dir:`py:currentmodule`, this directive produces no output. "
"Instead, it serves to notify Sphinx that all following :rst:dir:`option` "
"directives document options for the program called *name*."
msgstr ""

#: ../../sphinx/doc/domains.rst:1042
msgid ""
"If you use :rst:dir:`program`, you have to qualify the references in your "
":rst:role:`option` roles by the program name, so if you have the following "
"situation ::"
msgstr ""

#: ../../sphinx/doc/domains.rst:1058
msgid ""
"then ``:option:`rm -r``` would refer to the first option, while "
"``:option:`svn -r``` would refer to the second one."
msgstr ""

#: ../../sphinx/doc/domains.rst:1061
msgid ""
"The program name may contain spaces (in case you want to document "
"subcommands like ``svn add`` and ``svn commit`` separately)."
msgstr ""

#: ../../sphinx/doc/domains.rst:1067
msgid ""
"There is also a very generic object description directive, which is not tied"
" to any domain:"
msgstr ""

#: ../../sphinx/doc/domains.rst:1073
msgid ""
"This directive produces the same formatting as the specific ones provided by"
" domains, but does not create index entries or cross-referencing targets. "
"Example::"
msgstr ""

#: ../../sphinx/doc/domains.rst:1083
msgid "The JavaScript Domain"
msgstr ""

#: ../../sphinx/doc/domains.rst:1085
msgid "The JavaScript domain (name **js**) provides the following directives:"
msgstr ""

#: ../../sphinx/doc/domains.rst:1089
msgid ""
"Describes a JavaScript function or method.  If you want to describe "
"arguments as optional use square brackets as :ref:`documented <signatures>` "
"for Python signatures."
msgstr ""

#: ../../sphinx/doc/domains.rst:1093
msgid ""
"You can use fields to give more details about arguments and their expected "
"types, errors which may be thrown by the function, and the value being "
"returned::"
msgstr ""

#: ../../sphinx/doc/domains.rst:1107 ../../sphinx/doc/domains.rst:1129
msgid "This is rendered as:"
msgstr ""

#: ../../sphinx/doc/domains.rst:1111
msgid "An URI to the location of the resource."
msgstr ""

#: ../../sphinx/doc/domains.rst:1112
msgid "Gets called with the object."
msgstr ""

#: ../../sphinx/doc/domains.rst:1113
msgid ""
"Gets called in case the request fails. And a lot of other text so we need "
"multiple lines."
msgstr ""

#: ../../sphinx/doc/domains.rst:1116
msgid "For whatever reason in that case."
msgstr ""

#: ../../sphinx/doc/domains.rst:1117
msgid "Something."
msgstr ""

#: ../../sphinx/doc/domains.rst:1121
msgid ""
"Describes a constructor that creates an object.  This is basically like a "
"function but will show up with a `class` prefix::"
msgstr ""

#: ../../sphinx/doc/domains.rst:1133
msgid "The name of the animal"
msgstr ""

#: ../../sphinx/doc/domains.rst:1134
msgid "an optional age for the animal"
msgstr ""

#: ../../sphinx/doc/domains.rst:1138
msgid "Describes a global variable or constant."
msgstr ""

#: ../../sphinx/doc/domains.rst:1142
msgid "Describes the attribute *name* of *object*."
msgstr ""

#: ../../sphinx/doc/domains.rst:1146 ../../sphinx/doc/domains.rst:1199
msgid "These roles are provided to refer to the described objects:"
msgstr ""

#: ../../sphinx/doc/domains.rst:1155
msgid "The reStructuredText domain"
msgstr ""

#: ../../sphinx/doc/domains.rst:1157
msgid ""
"The reStructuredText domain (name **rst**) provides the following "
"directives:"
msgstr ""

#: ../../sphinx/doc/domains.rst:1161
msgid ""
"Describes a reST directive.  The *name* can be a single directive name or "
"actual directive syntax (`..` prefix and `::` suffix) with arguments that "
"will be rendered differently.  For example::"
msgstr ""

#: ../../sphinx/doc/domains.rst:1173 ../../sphinx/doc/domains.rst:1191
msgid "will be rendered as:"
msgstr ""

#: ../../sphinx/doc/domains.rst:1177 ../../sphinx/doc/domains.rst:1195
msgid "Foo description."
msgstr ""

#: ../../sphinx/doc/domains.rst:1181
msgid "Bar description."
msgstr ""

#: ../../sphinx/doc/domains.rst:1185
msgid "Describes a reST role.  For example::"
msgstr ""

#: ../../sphinx/doc/domains.rst:1206
msgid "More domains"
msgstr ""

#: ../../sphinx/doc/domains.rst:1208
msgid ""
"The sphinx-contrib_ repository contains more domains available as "
"extensions; currently Ada_, CoffeeScript_, Erlang_, HTTP_, Lasso_, MATLAB_, "
"PHP_, and Ruby_ domains. Also available are domains for `Chapel`_, `Common "
"Lisp`_, dqn_, Go_, Jinja_, Operation_, and Scala_."
msgstr ""
