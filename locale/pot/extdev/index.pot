# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2016, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.6+\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-28 17:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sphinx/doc/extdev/index.rst:4
msgid "Developing extensions for Sphinx"
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:6
msgid "Since many projects will need special features in their documentation, Sphinx is designed to be extensible on several levels."
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:9
msgid "This is what you can do in an extension: First, you can add new :term:`builder`\\s to support new output formats or actions on the parsed documents.  Then, it is possible to register custom reStructuredText roles and directives, extending the markup.  And finally, there are so-called \"hook points\" at strategic places throughout the build process, where an extension can register a hook and run specialized code."
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:16
msgid "An extension is simply a Python module.  When an extension is loaded, Sphinx imports this module and executes its ``setup()`` function, which in turn notifies Sphinx of everything the extension offers -- see the extension tutorial for examples."
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:21
msgid "The configuration file itself can be treated as an extension if it contains a ``setup()`` function.  All other extensions to load must be listed in the :confval:`extensions` configuration value."
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:26
msgid "Extension metadata"
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:30
msgid "The ``setup()`` function can return a dictionary.  This is treated by Sphinx as metadata of the extension.  Metadata keys currently recognized are:"
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:33
msgid "``'version'``: a string that identifies the extension version.  It is used for extension version requirement checking (see :confval:`needs_extensions`) and informational purposes.  If not given, ``\"unknown version\"`` is substituted."
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:36
msgid "``'parallel_read_safe'``: a boolean that specifies if parallel reading of source files can be used when the extension is loaded.  It defaults to ``False``, i.e. you have to explicitly specify your extension to be parallel-read-safe after checking that it is."
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:40
msgid "``'parallel_write_safe'``: a boolean that specifies if parallel writing of output files can be used when the extension is loaded.  Since extensions usually don't negatively influence the process, this defaults to ``True``."
msgstr ""

#: ../../sphinx/doc/extdev/index.rst:45
msgid "APIs used for writing extensions"
msgstr ""

