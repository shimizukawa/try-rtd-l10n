# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2018, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 1.8.0+/b0a5d0c\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-03-22 07:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sphinx/doc/extdev/domainapi.rst:4
msgid "Domain API"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain:1
msgid "A Domain is meant to be a group of \"object\" description directives for objects of a similar nature, and corresponding roles to create references to them.  Examples would be Python modules, classes, functions etc., elements of a templating language, Sphinx roles and directives, etc."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain:6
msgid "Each domain has a separate storage for information about existing objects and how to reference them in `self.data`, which must be a dictionary.  It also must implement several functions that expose the object information in a uniform way to parts of Sphinx that allow the user to reference or search for objects in a domain-agnostic way."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain:12
msgid "About `self.data`: since all object and cross-referencing information is stored on a BuildEnvironment instance, the `domain.data` object is also stored in the `env.domaindata` dict under the key `domain.name`.  Before the build process starts, every active domain is instantiated and given the environment object; the `domaindata` dict must then either be nonexistent or a dictionary whose 'version' key is equal to the domain class' :attr:`data_version` attribute.  Otherwise, `IOError` is raised and the pickled environment is discarded."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.add_object_type:1
msgid "Add an object type."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.check_consistency:1
msgid "Do consistency checks (**experimental**)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.clear_doc:1
msgid "Remove traces of a document in the domain-specific inventories."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.directive:1
msgid "Return a directive adapter class that always gives the registered directive its full name ('domain:name') as ``self.name``."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_enumerable_node_type:1
msgid "Get type of enumerable nodes (experimental)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_full_qualified_name:1
msgid "Return full qualified name for given node."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:1
msgid "Return an iterable of \"object descriptions\", which are tuples with five items:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:4
msgid "`name`     -- fully qualified name"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:5
msgid "`dispname` -- name to display when searching/linking"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:6
msgid "`type`     -- object type, a key in ``self.object_types``"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:7
msgid "`docname`  -- the document where it is to be found"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:8
msgid "`anchor`   -- the anchor name for the object"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:9
msgid "`priority` -- how \"important\" the object is (determines placement in search results)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:12
msgid "1: default priority (placed before full-text matches)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:13
msgid "0: object is important (placed before default-priority objects)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:14
msgid "2: object is unimportant (placed after full-text matches)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_objects:15
msgid "-1: object should not show up in search at all"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.get_type_name:1
msgid "Return full name for given ObjType."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.merge_domaindata:1
msgid "Merge in data regarding *docnames* from a different domaindata inventory (coming from a subprocess in parallel builds)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.process_doc:1
msgid "Process a document after it is read by the environment."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.process_field_xref:1
msgid "Process a pending xref created in a doc field. For example, attach information about the current scope."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.resolve_any_xref:1
msgid "Resolve the pending_xref *node* with the given *target*."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.resolve_any_xref:3
msgid "The reference comes from an \"any\" or similar role, which means that we don't know the type.  Otherwise, the arguments are the same as for :meth:`resolve_xref`."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.resolve_any_xref:7
msgid "The method must return a list (potentially empty) of tuples ``('domain:role', newnode)``, where ``'domain:role'`` is the name of a role that could have created the same reference, e.g. ``'py:func'``. ``newnode`` is what :meth:`resolve_xref` would return."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.resolve_xref:1
msgid "Resolve the pending_xref *node* with the given *typ* and *target*."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.resolve_xref:3
msgid "This method should return a new node, to replace the xref node, containing the *contnode* which is the markup content of the cross-reference."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.resolve_xref:7
msgid "If no resolution can be found, None can be returned; the xref node will then given to the :event:`missing-reference` event, and if that yields no resolution, replaced by *contnode*."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.resolve_xref:11
msgid "The method can also raise :exc:`sphinx.environment.NoUri` to suppress the :event:`missing-reference` event being emitted."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.role:1
msgid "Return a role adapter function that always gives the registered role its full name ('domain:name') as the first argument."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.dangling_warnings:1
msgid "role name -> a warning message if reference is missing"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.data:1
msgid "data value"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.data_version:1
msgid "data version, bump this when the format of `self.data` changes"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.directives:1
msgid "directive name -> directive class"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.enumerable_nodes:1
msgid "node_class -> (enum_node_type, title_getter)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.indices:1
msgid "a list of Index subclasses"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.initial_data:1
msgid "data value for a fresh environment"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.label:1
msgid "domain label: longer, more descriptive (used in messages)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.name:1
msgid "domain name: should be short, but unique"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.object_types:1
msgid "type (usually directive) name -> ObjType instance"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Domain.roles:1
msgid "role name -> role callable"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.ObjType:1
msgid "An ObjType is the description for a type of object that a domain can document.  In the object_types attribute of Domain subclasses, object type names are mapped to instances of this class."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.ObjType:5
msgid "Constructor arguments:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.ObjType:7
msgid "*lname*: localized name of the type (do not include domain name)"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.ObjType:8
msgid "*roles*: all the roles that can refer to an object of this type"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.ObjType:9
msgid "*attrs*: object attributes -- currently only \"searchprio\" is known, which defines the object's priority in the full-text search index, see :meth:`Domain.get_objects()`."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index:1
msgid "An Index is the description for a domain-specific index.  To add an index to a domain, subclass Index, overriding the three name attributes:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index:4
msgid "`name` is an identifier used for generating file names."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index:5
msgid "`localname` is the section title for the index."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index:6
msgid "`shortname` is a short name for the index, for use in the relation bar in HTML output.  Can be empty to disable entries in the relation bar."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index:9
msgid "and providing a :meth:`generate()` method.  Then, add the index class to your domain's `indices` list.  Extensions can add indices to existing domains using :meth:`~sphinx.application.Sphinx.add_index_to_domain()`."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:1
msgid "Return entries for the index given by *name*.  If *docnames* is given, restrict to entries referring to these docnames."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:4
msgid "The return value is a tuple of ``(content, collapse)``, where *collapse* is a boolean that determines if sub-entries should start collapsed (for output formats that support collapsing sub-entries)."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:8
msgid "*content* is a sequence of ``(letter, entries)`` tuples, where *letter* is the \"heading\" for the given *entries*, usually the starting letter."
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:11
msgid "*entries* is a sequence of single entries, where a single entry is a sequence ``[name, subtype, docname, anchor, extra, qualifier, descr]``. The items in this sequence have the following meaning:"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:15
msgid "`name` -- the name of the index entry to be displayed"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:16
msgid "`subtype` -- sub-entry related type: 0 -- normal entry 1 -- entry with sub-entries 2 -- sub-entry"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:20
msgid "`docname` -- docname where the entry is located"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:21
msgid "`anchor` -- anchor for the entry within `docname`"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:22
msgid "`extra` -- extra info for the entry"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:23
msgid "`qualifier` -- qualifier for the description"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:24
msgid "`descr` -- description for the entry"
msgstr ""

#: ../../sphinx/sphinx/domains/__init__.py:docstring of sphinx.domains.Index.generate:26
msgid "Qualifier and description are not rendered e.g. in LaTeX output."
msgstr ""

